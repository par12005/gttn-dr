<?php
function gttn_tpps_init() {

//   drupal_set_message("Hello");
}

function gttn_tpps_menu(){
    
    $items = array();

    $items['gttn'] = array(
      'title' => 'GTTN TPPS Development',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gttn_tpps_form'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['gttn/species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => '_gttn_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
    );
    
    return $items;
}

function gttn_tpps_form ($form, &$form_state){
    
    global $user;
    if (isset($user->roles[1]) and $user->roles[1] == 'anonymous user'){
        //user is not logged in
        $destination = drupal_get_destination();
        drupal_goto('user/login', array('query' => $destination));
    }
    elseif (!(isset($user->roles[5]) and $user->roles[5] == 'gttn' or isset($user->roles[3]) and $user->roles[3] == 'administrator')){
        //user is logged in, but does not have adequate permissions
        drupal_access_denied();
    }
    else{
        //user is logged in correctly
        
        if (!isset($form_state['stage'])){
            $form_state['stage'] = 'first_page';
        }
        
        switch ($form_state['stage']){
            case 'first_page':
                page_1_form($form, $form_state);
                break;
            
            case 'second_page':
                page_2_form($form, $form_state);
                break;
            
            case 'results':
                results_form($form, $form_state);
                break;
            
            default:
                break;
        }
        
        $form['step'] = array(
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => $form_state['stage'],
        );
        
        drupal_add_js(drupal_get_path('module', 'gttn_tpps') . "/gttn_tpps.js");
        
        return $form;
    }
}

function gttn_tpps_form_validate ($form, &$form_state){
    if ($form_state['triggering_element']['#value'] == 'Back'){
        return;
    }
    
    switch ($form_state['stage']){
        case 'first_page':
            page_1_validate($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'gttn_tpps') . "/gttn_tpps.js");
            break;
        
        case 'second_page':
            page_2_validate($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'gttn_tpps') . "/gttn_tpps.js");
            break;
        
        case 'results':
            results_validate($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'gttn_tpps') . "/gttn_tpps.js");
            break;
        
        default:
            break;
    }
}

function gttn_tpps_form_submit ($form, &$form_state){
    
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    
    switch ($form_state['stage']){
        case 'first_page':
            $form_state['stage'] = 'second_page';
            break;
            
        case 'second_page':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'first_page';
            }
            else{
                $form_state['stage'] = 'results';
            }
            break;
            
        case 'results':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'second_page';
            }
            break;
            
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
}

function _gttn_species_autocomplete($string){
    $matches = array();
    
    $parts = explode(" ", $string);
    if (!isset($parts[1])){
        $parts[1] = "";
    }
    //var_dump($parts);
    
    $result = db_select('chado.organism', 'organism')
        ->fields('organism', array('genus', 'species'))
        ->condition('genus', db_like($parts[0]) . '%', 'LIKE')
        ->condition('species', db_like($parts[1]) . '%', 'LIKE')
        ->orderBy('genus')
        ->orderBy('species')
        ->execute();
    
    foreach($result as $row){
        $matches[$row->genus . " " . $row->species] = check_plain($row->genus . " " . $row->species);
    }
    
    drupal_json_output($matches);
}

function gttn_parse_xlsx($location){
    
    //modified from https://gist.github.com/searbe/3284011
    
    $content = array();
    $dir = '/var/www/Drupal/sites/default/files';
    
    $zip = new ZipArchive();
    $zip->open($location);
    $zip->extractTo($dir);

    $strings = simplexml_load_file($dir . '/xl/sharedStrings.xml');
    $sheet = simplexml_load_file($dir . '/xl/worksheets/sheet1.xml');

    $xlrows = $sheet->sheetData->row;

    foreach ($xlrows as $xlrow) {
        $arr = array();
        
        foreach ($xlrow->c as $cell) {
            
            $v = (string) $cell->v;

            if (isset($cell['t']) && $cell['t'] == 's') {
                $s  = array();
                $si = $strings->si[(int) $v];
                $si->registerXPathNamespace('n', 'http://schemas.openxmlformats.org/spreadsheetml/2006/main');
                
                foreach($si->xpath('.//n:t') as $t) {
                    $s[] = (string) $t;
                }
                
                $v = implode($s);
            }
            $arr[] = $v;
        }

        if (!isset($headers)) {
            $headers = $arr;
            $content['headers'] = $headers;
        } 
        else{
            $values = array_pad($arr, count($headers), '');
            $row    = array_combine($headers, $values);
            $content[] = $row;
        }
    }
    
    @unlink($dir);
    @unlink($inputFile);
    
    return $content;
    
}

function get_species_ids($form_state){
    $species = $form_state['saved_values']['first_page']['species'];
    $species_number = $species['number'];
    $species_ids = array();

    for ($i = 1; $i <= $species_number; $i++){
        $species_file = $species[$i]['spreadsheet']['file'];
        $file = file(file_load($species_file)->uri);
        $file_type = file_load($species_file)->filemime;

        if ($file_type == 'text/csv' or $file_type == 'text/plain'){
            $content = explode("\r", $file[0]);
            foreach ($content as $row){
                if (!isset($species_id_key)){
                    $columns = ($file_type == 'text/plain') ? explode("\t", $row) : explode(",", $row);
                    foreach($columns as $key => $col){
                        $columns[$key] = trim($col);
                        if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER|)$/', $columns[$key]) == 1){
                            $species_id_key = $key;
                            break;
                        }
                    }
                }
                else{
                    $row = ($file_type == 'text/plain') ? explode("\t", $row) : explode(",", $row);
                    array_push($species_ids, $row[$species_id_key]);
                }
            }
        }
        else{
            $location = '/var/www/Drupal/sites/default/files/' . file_load($species_file)->filename;
            $content = gttn_parse_xlsx($location);
            $columns = $content['headers'];
            $len = count($content) - 1;
            foreach($columns as $key => $col){
                $columns[$key] = trim($col);
                if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER|)$/', $columns[$key]) == 1){
                    $species_id_key = $columns[$key];
                }
            }
            for ($j = 0; $j < $len; $j++){
                array_push($species_ids, $content[$j][$species_id_key]);
            }
        }

    }
    
    return $species_ids;
}

function page_1_form(&$form, $form_state){

    if (isset($form_state['saved_values']['first_page'])){
        $values = $form_state['saved_values']['first_page'];
    }
    else{
        $values = array();
    }
    
    $form['species'] = array(
      '#type' => 'fieldset',
      '#tree' => TRUE,
      '#title' => t('Species information:'),
      '#description' => t('Up to 5 species per submission.'),
    );

    $form['species']['add'] = array(
      '#type' => 'button',
      '#title' => t('Add Species'),
      '#button_type' => 'button',
      '#value' => t('Add Species')
    );

    $form['species']['remove'] = array(
      '#type' => 'button',
      '#title' => t('Remove Species'),
      '#button_type' => 'button',
      '#value' => t('Remove Species')
    );

    $form['species']['number'] = array(
      '#type' => 'textfield',
      '#default_value' => isset($values['species']['number']) ? $values['species']['number'] : '1',
    );

    for($i = 1; $i <= 5; $i++){

        $form['species']["$i"] = array(
          '#type' => 'fieldset',
          '#title' => t("Species $i:"),
        );

        $form['species']["$i"]['name'] = array(
          '#type' => 'textfield',
          '#title' => t('Name:'),
          '#autocomplete_path' => "gttn/species/autocomplete",
          '#default_value' => isset($values['species']["$i"]['name']) ? $values['species']["$i"]['name'] : NULL,
        );
        
        $form['species']["$i"]['spreadsheet'] = array(
          '#type' => 'fieldset',
          '#title' => t("Species $i spreadsheet:"),
        );
        
        $form['species']["$i"]['spreadsheet']['location'] = array(
          '#type' => 'select',
          '#title' => t('Location format:'),
          '#options' => array(
            0 => '- Select -',
            1 => 'Exact (WGS 84)',
            2 => 'Exact (NAD 83)',
            3 => 'Exact (ETRS 89)',
            4 => 'Custom Coordinates format',
            5 => 'Country/Region',
          ),
          '#default_value' => isset($values['species']["$i"]['spreadsheet']['location']) ? $values['species']["$i"]['spreadsheet']['location'] : 0,
        );
        
        $form['species']["$i"]['spreadsheet']['file'] = array(
          '#type' => 'managed_file',
          '#title' => t("Species $i file:"),
          '#upload_location' => 'public://',
          '#upload_validators' => array(
            'file_validate_extensions' => array('txt csv xlsx'),
          ),
          '#default_value' => isset($values['species']["$i"]['spreadsheet']['file']) ? $values['species']["$i"]['spreadsheet']['file'] : NULL,
          '#description' => 'Columns with information describing the Identifier of the tree and the location of the tree are required.'
        );
    }
    
    $form['public'] = array(
      '#type' => 'checkbox',
      '#title' => t('This information may be published to the greater TreeGenes site.'),
      '#default_value' => isset($values['public']) ? $values['public'] : NULL,
    );

    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => 'Next',
    );
    
    return $form;
}

function page_1_validate(&$form, &$form_state){
    
    if ($form_state['submitted'] == '1'){
        $species = $form_state['values']['species'];
        $species_number = $species['number'];
        
        for ($i = 1; $i <= $species_number; $i++){
            $current_species = $species[$i];
            $location_format = $current_species['spreadsheet']['location'];
            $metadata_file = $current_species['spreadsheet']['file'];
            
            if ($current_species['name'] == ''){
                form_set_error("species][$i][name", "Species $i name: field is required.");
            }
            
            if ($location_format === '0'){
                form_set_error("species][$i][spreadsheet][location", 'Spreadsheet Location Format: field is required.');
            }
            elseif ($metadata_file == ''){
                form_set_error("species][$i][spreadsheet][file", 'Spreadsheet file upload: field is required.');
            }
            elseif ($location_format === '5'){
                $file_type = file_load($metadata_file)->filemime;
                $file = file(file_load($metadata_file)->uri);

                if ($file_type == 'text/csv' or $file_type == 'text/plain'){
                    $columns = explode("\r", $file[0]);
                    $columns = ($file_type == 'text/plain') ? explode("\t", $columns[0]) : explode(",", $columns[0]);
                    $id_omitted = TRUE;
                    $location_omitted = TRUE;

                    foreach($columns as $key => $col){
                        $columns[$key] = trim($col);
                        if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER)$/', $columns[$key]) == 1){
                            $id_omitted = FALSE;
                        }
                        elseif (preg_match('/^(location|Location|LOCATION|country|Country|COUNTRY)$/', $columns[$key]) == 1){
                            $location_omitted = FALSE;
                        }
                    }

                    if ($id_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your "Identifier" column. Please resubmit your file with a column named "Identifier", with an identifier for each tree.');
                    }
                    if ($location_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your Location column. Please resubmit your file with a column named "Location" or "Country", with the location of each tree.');
                    }
                }
                elseif ($file_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'){
                    $location = '/var/www/Drupal/sites/default/files/' . file_load($metadata_file)->filename;

                    $content = gttn_parse_xlsx($location);
                    $columns = $content['headers'];
                    $id_omitted = TRUE;
                    $location_omitted = TRUE;

                    foreach($columns as $key => $col){
                        $columns[$key] = trim($col);
                        if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER)$/', $columns[$key]) == 1){
                            $id_omitted = FALSE;
                        }
                        elseif (preg_match('/^(location|Location|LOCATION|country|Country|COUNTRY)$/', $columns[$key]) == 1){
                            $location_omitted = FALSE;
                        }
                    }

                    if ($id_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your "Identifier" column. Please resubmit your file with a column named "Identifier", with an identifier for each tree.');
                    }
                    if ($location_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your "Location" column. Please resubmit your file with a column named "Location", with the location of each tree.');
                    }
                }

            }
            else{
                $file_type = file_load($metadata_file)->filemime;
                $file = file(file_load($metadata_file)->uri);

                if ($file_type == 'text/csv' or $file_type == 'text/plain'){
                    $columns = explode("\r", $file[0]);
                    $columns = ($file_type == 'text/plain') ? explode("\t", $columns[0]) : explode(",", $columns[0]);
                    $id_omitted = TRUE;
                    $lat_omitted = TRUE;
                    $long_omitted = TRUE;

                    foreach($columns as $key => $col){
                        $columns[$key] = trim($col);
                        if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER)$/', $columns[$key]) == 1){
                            $id_omitted = FALSE;
                        }
                        elseif (preg_match('/^(latitude|Latitude|LATITUDE|lat|Lat|LAT)$/', $columns[$key]) == 1){
                            $lat_omitted = FALSE;
                        }
                        elseif (preg_match('/^(longitude|Longitude|LONGITUDE|long|Long|LONG)$/', $columns[$key]) == 1){
                            $long_omitted = FALSE;
                        }
                    }

                    if ($id_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your "Identifier" column. Please resubmit your file with a column named "Identifier", with an identifier for each tree.');
                    }
                    if ($lat_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your Latitude column. Please resubmit your file with a column named "Latitude", with the coordinate of each tree.');
                    }
                    if ($long_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your Longitude column. Please resubmit your file with a column named "Longitude", with the coordinate of each tree.');
                    }
                }
                elseif ($file_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'){
                    $location = '/var/www/Drupal/sites/default/files/' . file_load($metadata_file)->filename;

                    $content = gttn_parse_xlsx($location);
                    $columns = $content['headers'];
                    $id_omitted = TRUE;
                    $lat_omitted = TRUE;
                    $long_omitted = TRUE;

                    foreach($columns as $key => $col){
                        $columns[$key] = trim($col);
                        if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER)$/', $columns[$key]) == 1){
                            $id_omitted = FALSE;
                        }
                        elseif (preg_match('/^(latitude|Latitude|LATITUDE|lat|Lat|LAT)$/', $columns[$key]) == 1){
                            $lat_omitted = FALSE;
                        }
                        elseif (preg_match('/^(longitude|Longitude|LONGITUDE|long|Long|LONG)$/', $columns[$key]) == 1){
                            $long_omitted = FALSE;
                        }
                    }

                    if ($id_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your "Identifier" column. Please resubmit your file with a column named "Identifier", with an identifier for each tree.');
                    }
                    if ($lat_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your Latitude column. Please resubmit your file with a column named "Latitude", with the coordinate of each tree.');
                    }
                    if ($long_omitted){
                        form_set_error("species][$i][spreadsheet][file", 'Tree Accession file: We were unable to find your Longitude column. Please resubmit your file with a column named "Longitude", with the coordinate of each tree.');
                    }
                }

            }
        }
        
    }
}

function page_2_form(&$form, $form_state){
    
    if (isset($form_state['saved_values']['second_page'])){
        $values = $form_state['saved_values']['second_page'];
    }
    else{
        $values = array();
    }
    
    $species_number = $form_state['saved_values']['first_page']['species']['number'];
    
    $form['data_types'] = array(
      '#type' => 'checkboxes',
      '#title' => t("Data Types: (select all that apply)"),
      '#options' => drupal_map_assoc(array(
        t('Genotypic'),
        t('Phenotypic')
      )),
    );
    
    $form['data_types']['Genotypic']['#default_value'] = isset($values['data_types']['Genotypic']) ? $values ['data_types']['Genotypic'] : NULL;
    $form['data_types']['Phenotypic']['#default_value'] = isset($values['data_types']['Phenotypic']) ? $values ['data_types']['Phenotypic'] : NULL;
    
    for ($i = 1; $i <= $species_number; $i++){
        
        $species_name = $form_state['saved_values']['first_page']['species'][$i]['name'];
        
        $form["species-$i"] = array(
          '#type' => 'fieldset',
          '#title' => t("$species_name Data:"),
          '#tree' => TRUE,
        );
        
        $form["species-$i"]['sample_date'] = array(
          '#type' => 'fieldset',
          '#title' => t("Sampling Date:"),
          '#tree' => TRUE,
        );
        
        $yearArr = array();
        $yearArr[0] = '- Select -';
        for ($j = 1950; $j <= 2017; $j++) {
            $index = $j - 1949;
            $yearArr[$index] = $j;
        }
        
        $form["species-$i"]['sample_date']['year'] = array(
          '#type' => 'select',
          '#title' => t('Year:'),
          '#options' => $yearArr,
          '#default_value' => isset($values["species-$i"]['sample_date']['year']) ? $values["species-$i"]['sample_date']['year'] : 0,
          '#prefix' => '<div class="container-inline">',
        );
        
        $form["species-$i"]['sample_date']['month'] = array(
          '#type' => 'select',
          '#title' => t('Month:'),
          '#options' => array(
            0 => '- Select -',
            1 => 'January',
            2 => 'February',
            3 => 'March',
            4 => 'April',
            5 => 'May',
            6 => 'June',
            7 => 'July',
            8 => 'August',
            9 => 'September',
            10 => 'October',
            11 => 'November',
            12 => 'December'
          ),
          '#default_value' => isset($values["species-$i"]['sample_date']['month']) ? $values["species-$i"]['sample_date']['month'] : 0,
          '#suffix' => '</div>',
          '#states' => array(
            'invisible' => array(
              ':input[name="species-' . $i . '[sample_date][year]"]' => array('value' => '0')
            )
          )
        );
        
        $form["species-$i"]['analysis_date'] = array(
          '#type' => 'fieldset',
          '#title' => t("Analysis Date:"),
          '#tree' => TRUE,
        );
        
        $form["species-$i"]['analysis_date']['year'] = array(
          '#type' => 'select',
          '#title' => t('Year:'),
          '#options' => $yearArr,
          '#default_value' => isset($values["species-$i"]['analysis_date']['year']) ? $values["species-$i"]['analysis_date']['year'] : 0,
          '#prefix' => '<div class="container-inline">',
        );
        
        $form["species-$i"]['analysis_date']['month'] = array(
          '#type' => 'select',
          '#title' => t('Month:'),
          '#options' => array(
            0 => '- Select -',
            1 => 'January',
            2 => 'February',
            3 => 'March',
            4 => 'April',
            5 => 'May',
            6 => 'June',
            7 => 'July',
            8 => 'August',
            9 => 'September',
            10 => 'October',
            11 => 'November',
            12 => 'December'
          ),
          '#default_value' => isset($values["species-$i"]['analysis_date']['month']) ? $values["species-$i"]['analysis_date']['month'] : 0,
          '#suffix' => '</div>',
          '#states' => array(
            'invisible' => array(
              ':input[name="species-' . $i . '[analysis_date][year]"]' => array('value' => '0')
            )
          )
        );
    }
    
    $form['genotype'] = array(
      '#type' => 'fieldset',
      '#title' => t('Genotypic Information:'),
      '#tree' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="data_types[Genotypic]"]' => array('checked' => TRUE)
        )
      )
    );
    
    $form['genotype']['type'] = array(
      '#type' => 'select',
      '#title' => t('Genotype Marker Type:'),
      '#options' => array(
        0 => '- Select -',
        1 => 'SNPs',
        2 => 'SSRs',
      ),
      '#default_value' => isset($values['genotype']['type']) ? $values['genotype']['type'] : 0,
    );
    
    $form['genotype']['SNPs-type'] = array(
      '#type' => 'select',
      '#title' => t('SNPs type:'),
      '#options' => array(
        0 => '- Select -',
        1 => 'Resequencing',
        2 => 'Assay/Array'
      ),
      '#default_value' => isset($values['genotype']['SNPs-type']) ? $values['genotype']['SNPs-type'] : 0,
      '#states' => array(
        'visible' => array(
          ':input[name="genotype[type]"]' => array('value' => '1')
        )
      )
    );
    
    $form['genotype']['spreadsheet'] = array(
      '#type' => 'managed_file',
      '#title' => t('Genotype Spreadsheet:'),
      '#upload_location' => 'public://',
      '#upload_validators' => array(
        'file_validate_extensions' => array('txt csv xlsx'),
      ),
      '#default_value' => isset($values['genotype']['spreadsheet']) ? $values['genotype']['spreadsheet'] : NULL,
      '#description' => 'Columns with Identifier, probe sequence 1, probe sequence 2, and alleles are required.',
      '#states' => array(
        'invisible' => array(
          ':input[name="genotype[SNPs-type]"]' => array('value' => '1'),
          ':input[name="genotype[type]"]' => array('value' => '1')
        )
      )
    );
    
    $form['genotype']['vcf'] = array(
      '#type' => 'managed_file',
      '#title' => t('Genotype VCF File:'),
      '#upload_location' => 'public://',
      '#upload_validators' => array(
        'file_validate_extensions' => array('vcf'),
      ),
      '#default_value' => isset($values['genotype']['vcf']) ? $values['genotype']['vcf'] : NULL,
      '#states' => array(
        'visible' => array(
          ':input[name="genotype[SNPs-type]"]' => array('value' => '1'),
          ':input[name="genotype[type]"]' => array('value' => '1')
        )
      )
    );
    
    $form['phenotype'] = array(
      '#type' => 'fieldset',
      '#title' => t('Phenotypic Information:'),
      '#tree' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="data_types[Phenotypic]"]' => array('checked' => TRUE)
        )
      )
    );
    
    $form['phenotype']['type'] = array(
      '#type' => 'select',
      '#title' => t('Phenotype type:'),
      '#options' => array(
        0 => '- Select -',
        1 => 'Isotopes',
        2 => 'Other'
      ),
      '#default_value' => isset($values['phenotype']['type']) ? $values['phenotype']['type'] : 0,
    );
    
    $form['phenotype']['isotope'] = array(
      '#type' => 'managed_file',
      '#title' => t('Isotopes File:'),
      '#upload_location' => 'public://',
      '#upload_validators' => array(
        'file_validate_extensions' => array('txt csv xlsx'),
      ),
      '#default_value' => isset($values['phenotype']['isotope']) ? $values['phenotype']['isotope'] : NULL,
      '#desription' => t('Please provide a file with the TreeID and the names of the isotopes as the columns.'),
      '#states' => array(
        'visible' => array(
          ':input[name="phenotype[type]"]' => array('value' => '1')
        )
      )
    );
    
    $form['phenotype']['other'] = array(
      '#type' => 'managed_file',
      '#title' => t('Phenotype File:'),
      '#upload_location' => 'public://',
      '#default_value' => isset($values['phenotype']['other']) ? $values['phenotype']['other'] : NULL,
      '#states' => array(
        'visible' => array(
          ':input[name="phenotype[type]"]' => array('value' => '2')
        )
      )
    );
    
    $form['Back'] = array(
      '#type' => 'submit',
      '#value' => 'Back',
    );
    
    $form['Next'] = array(
      '#type' => 'submit',
      '#value' => 'Next',
    );
    
    return $form;
}

function page_2_validate(&$form, &$form_state){
    //validate input for page 2
    
    if ($form_state['submitted'] == '1'){
        
        function vcf($vcf_file, $form_state){
            $file = file(file_load($vcf_file)->uri);
            $content = array();
            $species_ids = get_species_ids($form_state);
            $id_from_genotype = array();
            
            foreach ($file as $row){
                if ($row[0] != '#'){
                    $row = explode("\t", $row);
                    $len = count($row);
                    for ($i = 0; $i < $len; $i++){
                        if ($row[$i] === ''){
                            unset($row[$i]);
                        }
                    }
                    array_values($row);
                    array_push($id_from_genotype, $row[2]);
                }
            }
            
            foreach($id_from_genotype as $id){
                if (!in_array($id, $species_ids)){
                    form_set_error('genotype][spreadsheet', "Identifier $id was not found in the sampling metadata files. Please re-upload those files with location information of $id, or re-upload the genotype VCF file without data for $id.");
                }
            }
        }
        
        function spreadsheet($spreadsheet, $form_state){
            $file = file(file_load($spreadsheet)->uri);
            $file_type = file_load($spreadsheet)->filemime;
            $compare_ids = FALSE;
            
            if ($file_type == 'text/csv' or $file_type == 'text/plain'){
                $content = explode("\r", $file[0]);
                $columns = ($file_type == 'text/plain') ? explode("\t", $content[0]) : explode(",", $content[0]);
                $id_omitted = TRUE;
                $seq_1_omitted = TRUE;
                $seq_2_omitted = TRUE;
                $allele_omitted = TRUE;

                foreach($columns as $key => $col){
                    $columns[$key] = trim($col);
                    if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER|)$/', $columns[$key]) == 1){
                        $id_key = $key;
                        $id_omitted = FALSE;
                    }
                    elseif (preg_match('/^(sequence 1|sequence_1|Sequence_1|Sequence 1|SEQUENCE 1|SEQUENCE_1)$/', $columns[$key]) == 1){
                        $seq_1_omitted = FALSE;
                    }
                    elseif (preg_match('/^(sequence 2|sequence_2|Sequence_2|Sequence 2|SEQUENCE 2|SEQUENCE_2)$/', $columns[$key]) == 1){
                        $seq_2_omitted = FALSE;
                    }
                    elseif (preg_match('/^(allele|Allele|ALLELE)$/', $columns[$key]) == 1){
                        $allele_omitted = FALSE;
                    }
                }

                if ($id_omitted){
                    form_set_error("genotype][spreadsheet", 'Genotype Spreadsheet: We were unable to find your "Identifier" column. Please resubmit your file with a column named "Identifier", with an identifier for each tree.');
                }
                elseif ($seq_1_omitted){
                    form_set_error("genotype][spreadsheet", 'Genotype Spreadsheet: We were unable to find your Sequence 1 column. Please resubmit your file with a column named "Sequence 1", with probe sequence 1 of each tree.');
                }
                elseif ($seq_2_omitted){
                    form_set_error("genotype][spreadsheet", 'Genotype Spreadsheet: We were unable to find your Sequence 2 column. Please resubmit your file with a column named "Sequence 2", with probe sequence 2 of each tree.');
                }
                elseif ($allele_omitted){
                    form_set_error("genotype][spreadsheet", 'Genotype Spreadsheet: We were unable to find your Allele column. Please resubmit your file with a column named "Allele", with the allele of each tree.');
                }
                else{
                    $compare_ids = TRUE;
                }
            }
            elseif ($file_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'){
                $location = '/var/www/Drupal/sites/default/files/' . file_load($spreadsheet)->filename;

                $content = gttn_parse_xlsx($location);
                $columns = $content['headers'];
                $id_omitted = TRUE;
                $seq_1_omitted = TRUE;
                $seq_2_omitted = TRUE;
                $allele_omitted = TRUE;

                foreach($columns as $key => $col){
                    $columns[$key] = trim($col);
                    if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER|)$/', $columns[$key]) == 1){
                        $id_key = $key;
                        $id_omitted = FALSE;
                    }
                    elseif (preg_match('/^(sequence 1|sequence_1|Sequence_1|Sequence 1|SEQUENCE 1|SEQUENCE_1)$/', $columns[$key]) == 1){
                        $seq_1_omitted = FALSE;
                    }
                    elseif (preg_match('/^(sequence 2|sequence_2|Sequence_2|Sequence 2|SEQUENCE 2|SEQUENCE_2)$/', $columns[$key]) == 1){
                        $seq_2_omitted = FALSE;
                    }
                    elseif (preg_match('/^(allele|Allele|ALLELE)$/', $columns[$key]) == 1){
                        $allele_omitted = FALSE;
                    }
                }

                if ($id_omitted){
                    form_set_error("genotype][spreadsheet", 'Genotype Spreadsheet: We were unable to find your "Identifier" column. Please resubmit your file with a column named "Identifier", with an identifier for each tree.');
                }
                elseif ($seq_1_omitted){
                    form_set_error("genotype][spreadsheet", 'Genotype Spreadsheet: We were unable to find your Sequence 1 column. Please resubmit your file with a column named "Sequence 1", with probe sequence 1 of each tree.');
                }
                elseif ($seq_2_omitted){
                    form_set_error("genotype][spreadsheet", 'Genotype Spreadsheet: We were unable to find your Sequence 2 column. Please resubmit your file with a column named "Sequence 2", with probe sequence 2 of each tree.');
                }
                elseif ($allele_omitted){
                    form_set_error("genotype][spreadsheet", 'Genotype Spreadsheet: We were unable to find your Allele column. Please resubmit your file with a column named "Allele", with the allele of each tree.');
                }
                else{
                    $compare_ids = TRUE;
                }
            }
            
            if ($compare_ids){
                $id_from_genotype = array();
                
                if ($file_type == 'text/csv' or $file_type == 'text/plain'){
                    $content = array_slice($content, 1);
                    $len = count($content);
                    for ($i = 0; $i < $len; $i++){
                        $content[$i] = ($file_type == 'text/plain') ? explode("\t", $content[$i]) : explode(",", $content[$i]);
                        array_push($id_from_genotype, $content[$i][$id_key]);
                    }
                }
                else{
                    $id_key = $content['headers'][$id_key];
                    $len = count($content) - 1;
                    
                    for ($i = 0; $i < $len; $i++){
                        array_push($id_from_genotype, $content[$i][$id_key]);
                    }
                }
                
                $species_ids = get_species_ids($form_state);
                
                foreach($id_from_genotype as $id){
                    if (!in_array($id, $species_ids)){
                        form_set_error('genotype][spreadsheet', "Identifier $id was not found in the sampling metadata files. Please re-upload those files with location information of $id");
                    }
                }
                
            }
        }
        
        function isotope($isotope_file, $form_state){
            $file = file(file_load($isotope_file)->uri);
            $file_type = file_load($isotope_file)->filemime;
            $location = '/var/www/Drupal/sites/default/files/' . file_load($isotope_file)->filename;
            
            if ($file_type == 'text/csv' or $file_type == 'text/plain'){
                $content = explode("\r", $file[0]);
                $columns = ($file_type == 'text/plain') ? explode("\t", $content[0]) : explode(",", $content[0]);
                $id_omitted = TRUE;

                foreach($columns as $key => $col){
                    $columns[$key] = trim($col);
                    if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER|)$/', $columns[$key]) == 1){
                        $id_key = $key;
                        $id_omitted = FALSE;
                    }
                }

                if ($id_omitted){
                    form_set_error("phenotype][isotope", 'Isotope File: We were unable to find your "Identifier" column. Please resubmit your file with a column named "Identifier", with an identifier for each tree.');
                }
                else{
                    $compare_ids = TRUE;
                }
            }
            elseif ($file_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'){
                
                $content = gttn_parse_xlsx($location);
                $columns = $content['headers'];
                $id_omitted = TRUE;

                foreach($columns as $key => $col){
                    $columns[$key] = trim($col);
                    if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER|)$/', $columns[$key]) == 1){
                        $id_key = $key;
                        $id_omitted = FALSE;
                    }
                }

                if ($id_omitted){
                    form_set_error("phenotype][isotope", 'Isotope File: We were unable to find your "Identifier" column. Please resubmit your file with a column named "Identifier", with an identifier for each tree.');
                }
                else{
                    $compare_ids = TRUE;
                }
            }
            
            if ($compare_ids){
                $id_from_phenotype = array();
                
                if ($file_type == 'text/csv' or $file_type == 'text/plain'){
                    $content = array_slice($content, 1);
                    $len = count($content);
                    for ($i = 0; $i < $len; $i++){
                        $content[$i] = ($file_type == 'text/plain') ? explode("\t", $content[$i]) : explode(",", $content[$i]);
                        array_push($id_from_phenotype, $content[$i][$id_key]);
                    }
                }
                else{
                    $id_key = $content['headers'][$id_key];
                    $len = count($content) - 1;
                    
                    for ($i = 0; $i < $len; $i++){
                        array_push($id_from_phenotype, $content[$i][$id_key]);
                    }
                }
                
                $species_ids = get_species_ids($form_state);
                
                foreach($id_from_phenotype as $id){
                    if (!in_array($id, $species_ids)){
                        form_set_error('phenotype][isotope', "Identifier $id was not found in the sampling metadata files. Please re-upload those files with location information of $id");
                    }
                }
                
            }
        }
        
        $genotypic = $form_state['values']['data_types']['Genotypic'];
        $phenotypic = $form_state['values']['data_types']['Phenotypic'];
        
        if ($genotypic === 'Genotypic'){
            $genotype = $form_state['values']['genotype'];
            $type = $genotype['type'];
            
            if ($type === '0'){
                form_set_error('genotype][type', 'Genotype Marker Type: field is required.');
            }
            elseif ($type === '1'){
                $snps_type = $genotype['SNPs-type'];
                if ($snps_type === '0'){
                    form_set_error('genotype][SNPs-type', 'SNPs type: field is required.');
                }
                elseif ($snps_type === '1'){
                    $snp_file = $genotype['vcf'];
                    if ($snp_file == ''){
                        form_set_error('genotype][vcf', 'SNPs file: field is required.');
                    }
                    else{
                        vcf($snp_file, $form_state);
                    }
                }
                else {
                    $snp_file = $genotype['spreadsheet'];
                    if ($snp_file == ''){
                        form_set_error('genotype][spreadsheet', 'SNPs file: field is required.');
                    }
                    else{
                        spreadsheet($snp_file, $form_state);
                    }
                }
            }
            else {
                $ssrs_file = $genotype['spreadsheet'];
                if ($ssrs_file == ''){
                    form_set_error('genotype][spreadsheet', 'SSRs file: field is required.');
                }
                else{
                    spreadsheet($ssrs_file, $form_state);
                }
            }
            
            
        }
        if ($phenotypic === 'Phenotypic'){
            $phenotype = $form_state['values']['phenotype'];
            $type = $phenotype['type'];
            
            if ($type == '0'){
                form_set_error('phenotype][type', 'Phenotype Type: field is required.');
            }
            elseif ($type == '1'){
                $isotope = $phenotype['isotope'];
                if ($isotope == ''){
                    form_set_error('phenotype][isotope', 'Isotope File: field is required.');
                }
                else{
                    isotope($isotope, $form_state);
                }
            }
            elseif ($phenotype['other'] == ''){
                form_set_error('phenotype][other', 'Phenotype File: field is required.');
            }
            
            
        }
    }
}

function results_form(&$form, $form_state){
    
    $info = $form_state['saved_values'];
    $first_page = $info['first_page'];
    $second_page = $info['second_page'];
    $species = $first_page['species'];
    $species_number = $species['number'];
    $public = $first_page['public'];
    $data_type = $second_page['data_types'];
    
    $year_arr = array();
    $year_arr[0] = '- Select -';
        for ($j = 1950; $j <= 2017; $j++) {
            $index = $j - 1949;
            $year_arr[$index] = $j;
        }
    
    $month_arr = array(
      0 => '- Select -',
      1 => 'January',
      2 => 'February',
      3 => 'March',
      4 => 'April',
      5 => 'May',
      6 => 'June',
      7 => 'July',
      8 => 'August',
      9 => 'September',
      10 => 'October',
      11 => 'November',
      12 => 'December'
    );
    
    print_r("<div id='results'>");
    
    if ($public){
        print_r("<div>This information WILL be published on the greater TreeGenes site.</div><br>");
    }
    else{
        print_r("<div>This information WILL NOT be published on the greater TreeGenes site.</div><br>");
    }
    
    for ($i = 1; $i <= $species_number; $i++){
        $current_species = $species[$i];
        $species_name = $current_species['name'];
        $species_file = $current_species['spreadsheet']['file'];
        $file_location = file_load($species_file)->uri;
        $sample_date = $second_page["species-$i"]['sample_date'];
        $analysis_date = $second_page["species-$i"]['analysis_date'];
        $genotype = $second_page['genotype'];
        $phenotype = $second_page['phenotype'];
        
        print_r("<div>Species $i = $species_name</div>");
        print_r("<div>$species_name file stored at $file_location</div>");
        
        if ($sample_date['year'] !== '0'){
            $month = $month_arr[$sample_date['month']];
            $year = $year_arr[$sample_date['year']];
            print_r("<div>$species_name was sampled in $month of $year</div>");
        }
        
        if ($analysis_date['year'] !== '0'){
            $month = $month_arr[$analysis_date['month']];
            $year = $year_arr[$analysis_date['year']];
            print_r("<div>$species_name was analyzed in $month of $year</div>");
        }
        
        print_r("<br>");
    }
    
    if ($data_type['Genotypic'] == 'Genotypic'){
        if ($genotype['type'] == '1' and $genotype['SNPs-type'] == '1'){
            $genotype_file = file_load($genotype['vcf'])->uri;
        }
        else{
            $genotype_file = file_load($genotype['spreadsheet'])->uri;
        }
        print_r("<div>This submission will include genotypic data. It is stored at $genotype_file.</div>");
    }
    
    print_r("<br>");
    
    if ($data_type['Phenotypic'] == 'Phenotypic'){
        if ($phenotype['type'] == '1'){
            $phenotype_file = file_load($phenotype['isotope'])->uri;
        }
        else{
            $phenotype_file = file_load($phenotype['other'])->uri;
        }
        
        print_r("<div>This submission will include phenotypic data.It is stored at $phenotype_file</div>");
    }
    
    print_r("</div>");
    
    $form['results'] = array(
      '#type' => 'textfield',
      '#title' => t('Submission summary:'),
      '#suffix' => '<div id="display_results"></div>'
    );
    
    
    $form['Back'] = array(
      '#type' => 'submit',
      '#value' => 'Back',
    );
    
    return $form;
}