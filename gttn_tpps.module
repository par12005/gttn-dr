<?php
require_once 'includes/parse_xlsx.inc';

function gttn_tpps_init() {

//   drupal_set_message("Hello");
}

function gttn_tpps_menu(){
    
    $items = array();

    $items['gttn'] = array(
      'title' => 'GTTN TPPS Development',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('gttn_tpps_form'),
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_NORMAL_ITEM,
    );
    
    $items['gttn/species/autocomplete'] = array(
      'title' => 'Autocomplete for species',
      'page callback' => '_gttn_species_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
      'file' => 'ajax/gttn_tpps_ajax.php'
    );
    
    return $items;
}

function gttn_tpps_form ($form, &$form_state){
    
    global $user;
    if (isset($user->roles[1]) and $user->roles[1] == 'anonymous user'){
        //user is not logged in
        $destination = drupal_get_destination();
        drupal_goto('user/login', array('query' => $destination));
    }
    elseif (!(isset($user->roles[5]) and $user->roles[5] == 'gttn' or isset($user->roles[3]) and $user->roles[3] == 'administrator')){
        //user is logged in, but does not have adequate permissions
        drupal_access_denied();
    }
    else{
        //user is logged in correctly
        
        if (!isset($form_state['stage'])){
            $form_state['stage'] = 'first_page';
        }
        
        switch ($form_state['stage']){
            case 'first_page':
                require_once('forms/build/page_1.php');
                page_1_form($form, $form_state);
                break;
            
            case 'second_page':
                require_once('forms/build/page_2.php');
                page_2_form($form, $form_state);
                break;
            
            case 'results':
                require_once('forms/build/results.php');
                results_form($form, $form_state);
                break;
            
            default:
                break;
        }
        
        $form['step'] = array(
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => $form_state['stage'],
        );
        
        drupal_add_js(drupal_get_path('module', 'gttn_tpps') . "/gttn_tpps.js");
        
        return $form;
    }
}

function gttn_tpps_form_validate ($form, &$form_state){
    if ($form_state['triggering_element']['#value'] == 'Back'){
        return;
    }
    
    switch ($form_state['stage']){
        case 'first_page':
            require_once('forms/validate/page_1.php');
            page_1_validate($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'gttn_tpps') . "/gttn_tpps.js");
            break;
        
        case 'second_page':
            require_once('forms/validate/page_2.php');
            page_2_validate($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'gttn_tpps') . "/gttn_tpps.js");
            break;
        
        case 'results':
            results_validate($form, $form_state);
            drupal_add_js(drupal_get_path('module', 'gttn_tpps') . "/gttn_tpps.js");
            break;
        
        default:
            break;
    }
}

function gttn_tpps_form_submit ($form, &$form_state){
    
    $form_state['saved_values'][$form_state['stage']] = $form_state['values'];
    
    switch ($form_state['stage']){
        case 'first_page':
            $form_state['stage'] = 'second_page';
            break;
            
        case 'second_page':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'first_page';
            }
            else{
                $form_state['stage'] = 'results';
            }
            break;
            
        case 'results':
            if ($form_state['triggering_element']['#value'] == 'Back'){
                $form_state['stage'] = 'second_page';
            }
            break;
            
        default:
            print_r('Invalid form stage');
            break;
    }
    
    if (isset($form_state['saved_values']['form_build_id'])){
        $form_state['values']['form_build_id'] = $form_state['saved_values']['form_build_id'];
    }
    $form_state['saved_values']['form_build_id'] = $form_state['values']['form_build_id'];
    $form_state['rebuild'] = TRUE;
}

function get_species_ids($form_state){
    $species = $form_state['saved_values']['first_page']['species'];
    $species_number = $species['number'];
    $species_ids = array();

    for ($i = 1; $i <= $species_number; $i++){
        $species_file = $species[$i]['spreadsheet']['file'];
        $file = file(file_load($species_file)->uri);
        $file_type = file_load($species_file)->filemime;

        if ($file_type == 'text/csv' or $file_type == 'text/plain'){
            $content = explode("\r", $file[0]);
            foreach ($content as $row){
                if (!isset($species_id_key)){
                    $columns = ($file_type == 'text/plain') ? explode("\t", $row) : explode(",", $row);
                    foreach($columns as $key => $col){
                        $columns[$key] = trim($col);
                        if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER|)$/', $columns[$key]) == 1){
                            $species_id_key = $key;
                            break;
                        }
                    }
                }
                else{
                    $row = ($file_type == 'text/plain') ? explode("\t", $row) : explode(",", $row);
                    array_push($species_ids, $row[$species_id_key]);
                }
            }
        }
        else{
            $location = '/var/www/Drupal/sites/default/files/' . file_load($species_file)->filename;
            $content = gttn_parse_xlsx($location);
            $columns = $content['headers'];
            $len = count($content) - 1;
            foreach($columns as $key => $col){
                $columns[$key] = trim($col);
                if (preg_match('/^(id|ID|Id|Identifier|identifier|IDENTIFIER|)$/', $columns[$key]) == 1){
                    $species_id_key = $columns[$key];
                }
            }
            for ($j = 0; $j < $len; $j++){
                array_push($species_ids, $content[$j][$species_id_key]);
            }
        }

    }
    
    return $species_ids;
}
